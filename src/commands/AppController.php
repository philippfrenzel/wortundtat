<?php
/**
 * @link http://www.diemeisterei.de/
 * @copyright Copyright (c) 2014 diemeisterei GmbH, Stuttgart
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace app\commands;

use dektrium\user\Finder;
use dektrium\user\ModelManager;
use dmstr\console\controllers\BaseAppController;
use mikehaertl\shellcommand\Command;
use yii\base\Exception;


/**
 * Task runner command for development.
 * @package console\controllers
 * @author Tobias Munk <tobias@diemeisterei.de>
 */
class AppController extends BaseAppController
{

    public function init()
    {
        try {
            return parent::init(); // TODO: Change the autogenerated stub
        } catch (Exception $e) {
            echo "Warning: " . $e->getMessage() . "\n";
            echo "Some actions may not perform correctly\n\n";
        }
    }

    public $defaultAction = 'version';

    public function actionVersion($alias = '/app/version')
    {
        parent::actionVersion($alias);
    }
    /**
     * Clear [application]/web/assets folder
     */
    public function actionClearAssets()
    {
        $assets = \Yii::getAlias('@web/assets');

        // Matches from 7-8 char folder names, the 8. char is optional
        $matchRegex = '"^[a-z0-9][a-z0-9][a-z0-9][a-z0-9][a-z0-9][a-z0-9][a-z0-9]\?[a-z0-9]$"';

        // create $cmd command
        $cmd = 'cd "' . $assets . '" && ls | grep -e ' . $matchRegex . ' | xargs rm -rf ';

        // Set command
        $command = new Command($cmd);

        // Prompt user        
        $delete = $this->confirm("\nDo you really want to delete web assets?", ['default' => true]);

        if ($delete) {
            // Try to execute $command
            if ($command->execute()) {
                echo "Web assets have been deleted.\n\n";
            } else {
                echo "\n" . $command->getError() . "\n";
                echo $command->getStdErr();
            }
        }
    }

    /**
     * Setup admin user (create, update password, confirm)
     */
    public function actionSetupAdminUser()
    {
        $finder = \Yii::$container->get(Finder::className());
        $admin  = $finder->findUserByUsername('admin');
        if ($admin === null) {
            $email = $this->prompt(
                'E-Mail for application admin user:',
                ['default' => getenv('APP_ADMIN_EMAIL')]
            );
            $this->action('user/create', [$email, 'admin']);
            $password = $this->prompt(
                'Password for application admin user:',
                ['default' => getenv('APP_ADMIN_PASSWORD')]
            );
        } else {
            $password = $this->prompt(
                'Update password for application admin user (leave empty to skip):'
            );
        }
        if ($password) {
            $this->action('user/password', ['admin', $password]);
        }
        sleep(1); // confirmation may not succeed without a short pause
        $this->action('user/confirm', ['admin']);
    }

    /**
     * Generate application and required vendor documentation
     */
    public function actionGenerateDocs()
    {
        if ($this->confirm('Regenerate documentation files into ./docs-html', true)) {

            // array with commands
            $commands[] = 'vendor/bin/apidoc guide --interactive=0 docs web/apidocs';
            $commands[] = 'vendor/bin/apidoc api --interactive=0 --exclude=runtime/,tests/,vendor/ . web/apidocs';
            $commands[] = 'vendor/bin/apidoc guide --interactive=0 docs web/apidocs';

            foreach ($commands AS $command) {
                $cmd = new Command($command);
                if ($cmd->execute()) {
                    echo $cmd->getOutput();
                } else {
                    echo $cmd->getOutput();
                    echo $cmd->getStdErr();
                    echo $cmd->getError();
                }
            }
        }
    }
}
